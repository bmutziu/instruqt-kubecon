#!/bin/bash

set -euxoH pipefail
source /root/.bashrc > /dev/null 2>&1

# prereqs
cd ${DEMO_HOME:?}
rm -rf -v !(".example-namespace.yaml") ${DEMO_HOME:?}/*
kubebuilder init --plugins=go/v4-alpha --repo my.domain
kubebuilder create api --kind Website  --group kubecon --version v1beta1 --resource true --controller true
make install
kubectl apply --filename ${DEMO_HOME:?}/config/samples


echo '/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1beta1

import (
  metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// WebsiteSpec defines the desired state of Website
type WebsiteSpec struct {
  // INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
  // Important: Run "make" to regenerate code after modifying this file

  // ImageTag sets the container image for the website to deploy
  //+kubebuilder:validation:Pattern=`^[-a-z0-9]*$`
  ImageTag string `json:"imageTag"`
}

// WebsiteStatus defines the observed state of Website
type WebsiteStatus struct {
  // INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
  // Important: Run "make" to regenerate code after modifying this file
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status

// Website is the Schema for the websites API
type Website struct {
  metav1.TypeMeta   `json:",inline"`
  metav1.ObjectMeta `json:"metadata,omitempty"`

  Spec   WebsiteSpec   `json:"spec,omitempty"`
  Status WebsiteStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// WebsiteList contains a list of Website
type WebsiteList struct {
  metav1.TypeMeta `json:",inline"`
  metav1.ListMeta `json:"metadata,omitempty"`
  Items           []Website `json:"items"`
}

func init() {
  SchemeBuilder.Register(&Website{}, &WebsiteList{})
}
' > ${DEMO_HOME:?}/api/v1beta1/website_types.go
make install
kubectl patch \
  website.kubecon.my.domain website-sample \
  --namespace default \
  --type=merge \
  --patch='{"spec":{"name": "dog-smile-site"}}'

# new this challenge

echo '/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
  "context"
  "fmt"

  appsv1 "k8s.io/api/apps/v1"
  corev1 "k8s.io/api/core/v1"

  metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

  "k8s.io/apimachinery/pkg/api/errors"
  "k8s.io/apimachinery/pkg/runtime"
  ctrl "sigs.k8s.io/controller-runtime"
  "sigs.k8s.io/controller-runtime/pkg/client"
  "sigs.k8s.io/controller-runtime/pkg/log"

  kubeconv1beta1 "my.domain/api/v1beta1"
)

// WebsiteReconciler reconciles a Website object
type WebsiteReconciler struct {
  client.Client
  Scheme *runtime.Scheme
}

//+kubebuilder:rbac:groups=kubecon.my.domain,resources=websites,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=kubecon.my.domain,resources=websites/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=kubecon.my.domain,resources=websites/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the Website object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.12.2/pkg/reconcile
func (r *WebsiteReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
  log := log.FromContext(ctx)

  customResource := &kubeconv1beta1.Website{}
  if err := r.Client.Get(context.Background(), req.NamespacedName, customResource); err != nil {
    if errors.IsNotFound(err) {
      // TODO: handle deletes gracefully
      log.Info(fmt.Sprintf("Custom resource for website %s does not exist", customResource.Name))
      return ctrl.Result{}, nil
    } else {
      log.Error(err, fmt.Sprintf("Failed to retrieve custom resource %s", customResource.Name)
      return ctrl.Result{}, err
    }
  }
  
  // Use the `ImageTag` field from the website spec to personalise the log
  log.Info(fmt.Sprintf("Hello website reconciler with tag %s!", customResource.Spec.ImageTag))

  // Store any errors from creating the deployment in `err`
  // If an error did occur, immediately log and return failure
  err := r.createDeployment(ctx, customResource)
  if err != nil {
    if errors.IsAlreadyExists(err) {
      // TODO: handle updates gracefully
      log.Info(fmt.Sprintf("Deployment for website %s already exists", customResource.Name))
      return ctrl.Result{}, nil
    } else {
      log.Error(err, fmt.Sprintf("Failed to create deployment for website %s", customResource.Name))
      return ctrl.Result{}, err
    }
  }

  // Store any errors from creating the service in `err`
  // If an error did occur, immediately log and return failure
  err = r.createService(ctx, customResource)
  if err != nil {
    if errors.IsAlreadyExists(err) {
      // TODO: handle updates gracefully
      log.Info(fmt.Sprintf("Service for website %s already exists", customResource.Name))
      return ctrl.Result{}, nil
    } else {
      log.Error(err, fmt.Sprintf("Failed to create service for website %s", customResource.Name))
      return ctrl.Result{}, err
    }
  }

  return ctrl.Result{}, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *WebsiteReconciler) SetupWithManager(mgr ctrl.Manager) error {
  return ctrl.NewControllerManagedBy(mgr).
    For(&kubeconv1beta1.Website{}).
    Complete(r)
}

// Create a single reference for labels as it is a reused variable
func SetResourceLabels(customResource *kubeconv1beta1.Website) map[string]string {
  return map[string]string{
    "website": customResource.Name,
    "type": customResource.Kind,
  }
}

// Define and then create a deployment for your Website resource
func (r *WebsiteReconciler) createDeployment(ctx context.Context, customResource *kubeconv1beta1.Website) error {
  // Set the number of replicas to 2
  replicas := int32(2)

  // Define the key fields of a Kubernetes deployment
  // Use the CRD spec field `name` to make this deployment a custom name
  deployment := &appsv1.Deployment{
    ObjectMeta: metav1.ObjectMeta{
      Name:      customResource.Name,
      Namespace: customResource.Namespace,
      Labels:    SetResourceLabels(customResource),
    },
    Spec: appsv1.DeploymentSpec{
      Replicas: &replicas,
      Selector: &metav1.LabelSelector{MatchLabels: SetResourceLabels(customResource)},
      Template: corev1.PodTemplateSpec{
        ObjectMeta: metav1.ObjectMeta{Labels: SetResourceLabels(customResource)},
        Spec: corev1.PodSpec{
          Containers: []corev1.Container{
            {
              Name:  "nginx",
              // This is a publicly available container
              Image: "abangser/kubecon-dog-website",
              Ports: []corev1.ContainerPort{{
                ContainerPort: 80,
              }},
            },
          },
        },
      },
    },
  }

  // Return the outcome, either an error or nil
  // The reconcile loop will handle any errors gracefully
  return r.Client.Create(ctx, deployment)
}

// Define and then create a service for your Website resource
func (r *WebsiteReconciler) createService(ctx context.Context, customResource *kubeconv1beta1.Website) error {
  service := &corev1.Service{
    ObjectMeta: metav1.ObjectMeta{
      Name:      customResource.Name,
      Namespace: customResource.Namespace,
      Labels:    SetResourceLabels(customResource),
    },
    Spec: corev1.ServiceSpec{
      Ports: []corev1.ServicePort{
        {
          Port:     80,
          NodePort: 31000,
        },
      },
      Selector: SetResourceLabels(customResource),
      Type:     corev1.ServiceTypeNodePort,
    },
  }

  return r.Client.Create(ctx, service)
}
' > ${DEMO_HOME:?}/controllers/website_controller.go
