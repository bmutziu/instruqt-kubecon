#!/bin/bash

source /root/.bashrc > /dev/null 2>&1

echo '
// Create a single reference for labels as it is a reused variable
func SetResourceLabels(customResource *kubeconv1beta1.Website) map[string]string {
	labels := map[string]string{
		"website": customResource.Name,
		"type": customResource.Kind,
	}
}

// Define and then create a deployment for your Website resource
func (r *WebsiteReconciler) createDeployment(ctx context.Context, customResource *kubeconv1beta1.Website) error {
	// Set the number of replicas to 2
	replicas := int32(2)

  // Define the key fields of a Kubernetes deployment
	// Use the CRD spec field `name` to make this deployment a custom name
	deployment := &appsv1.Deployment{
		ObjectMeta: metav1.ObjectMeta{
			Name:      customResource.Name,
			Namespace: customResource.Namespace,
			Labels:    SetResourceLabels(customResource),
		},
		Spec: appsv1.DeploymentSpec{
			Replicas: &replicas,
			Selector: &metav1.LabelSelector{MatchLabels: SetResourceLabels(customResource)},
			Template: corev1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{Labels: SetResourceLabels(customResource)},
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						{
							Name:  "nginx",
							// This is a publicly available container
							Image: "abangser/kubecon-dog-website",
							Ports: []corev1.ContainerPort{{
								ContainerPort: 80,
							}},
						},
					},
				},
			},
		},
	}

	// Return the outcome, either an error or nil
	// The reconcile loop will handle any errors gracefully
	return r.Client.Create(ctx, deployment)
}
' >> ${DEMO_HOME:?}/controllers/website_controller.go

awk '
{print}
/"fmt"/ {
  print ""
  print "\tappsv1 \"k8s.io/api/apps/v1\""
  print "\tcorev1 \"k8s.io/api/core/v1\""
  print ""
  print "\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\""
}
' ${DEMO_HOME:?}/controllers/website_controller.go > /tmp/website_controller.go
mv /tmp/website_controller.go ${DEMO_HOME:?}/controllers/website_controller.go
